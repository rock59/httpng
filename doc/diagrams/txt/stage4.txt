title HTTPNG threads interaction concept (proposed design, stage 4)

participant HTTP(S) worker thread


participant [


participant Per-request fiber


participant TX (one of httpng fibers)

[->HTTP(S) worker thread:HTTP(S) request from client
box over HTTP(S) worker thread#yellow:Allocate `shuttle`
box over HTTP(S) worker thread:Parse HTTP(S) request, pack it into `shuttle`
HTTP(S) worker thread->TX (one of httpng fibers):`shuttle` with parsed HTTP(S) request
note over HTTP(S) worker thread:Sleep or handle something else
box over TX (one of httpng fibers):Create new fiber
TX (one of httpng fibers)->*Per-request fiber:`shuttle`
box over Per-request fiber:Fill in Lua table with request data
rbox over Per-request fiber #green:<color:#white>Call user handler</color>
box over Per-request fiber:write_header(<color:#blue>#1</color>)
box over Per-request fiber:Fill `shuttle` with HTTP(S) headers and (part of) body
box over Per-request fiber:Ref Lua strings, mark `shuttle` as owned by HTTP(S) thread
HTTP(S) worker thread<-Per-request fiber:Send `shuttle` with response
box over Per-request fiber:Do something useful
box over Per-request fiber:write(<color:#blue>#2</color>)
box over Per-request fiber#blue:<color:#white>Ref Lua strings #2</color>
box over Per-request fiber#blue:<color:#white>Add payload to the ring in `shuttle`</color>
HTTP(S) worker thread<--Per-request fiber:<color:#blue>Atomic `shuttle` modification</color>
box over HTTP(S) worker thread:Format HTTP(S) response <color:#blue>(#1 + #2)</color>
box over Per-request fiber#blue:<color:#white>write(#3)</color>
box over Per-request fiber#blue:<color:#white>Ref Lua strings #3</color>
box over Per-request fiber#blue:<color:#white>Add payload to the ring in `shuttle`</color>
HTTP(S) worker thread<--Per-request fiber:<color:#brown>Atomic `shuttle` modification</color>
[<-HTTP(S) worker thread:<color:#blue>HTTP(S) response (#1 + #2) to client</color>
box over Per-request fiber:Do something useful #2
box over Per-request fiber:close()
box over Per-request fiber:Mark `shuttle` as `must close request`
HTTP(S) worker thread<--Per-request fiber:<color:#brown>Atomic `shuttle` modification</color>
box over Per-request fiber:Do something useful #3
rbox over Per-request fiber #green:<color:#white>Exit user handler</color>
note over Per-request fiber:Sleep until `shuttle` returns
HTTP(S) worker thread->TX (one of httpng fibers):"Continue" notification
note over TX (one of httpng fibers):Mark shuttle as owned by TX
box over TX (one of httpng fibers)#blue:<color:#white>Unref old Lua strings (#1 + #2)</color>
box over TX (one of httpng fibers)#blue:<color:#white>See that #3 was not processed</color>
box over TX (one of httpng fibers)#blue:<color:#white>See that `must close request` was not processed</color>
note over TX (one of httpng fibers)#blue:<color:#white>Mark shuttle as owned by HTTP(S) thread</color>
HTTP(S) worker thread<-TX (one of httpng fibers):<color:#blue>Send `shuttle` with response #3 and "must close" flag</color>
[<-HTTP(S) worker thread:HTTP(S) body + "end of chunked" etc to client
HTTP(S) worker thread->TX (one of httpng fibers):<color:#blue>"Request closed" notification</color>
note over TX (one of httpng fibers):Mark shuttle as owned by TX
box over TX (one of httpng fibers)#blue:<color:#white>Unref old Lua strings (#3)</color>
Per-request fiber<-TX (one of httpng fibers):Wake sleeping fiber
HTTP(S) worker thread<-Per-request fiber:Request to free `shuttle`
abox over Per-request fiber:Exit fiber
destroyafter Per-request fiber
box over HTTP(S) worker thread #yellow:Free `shuttle`